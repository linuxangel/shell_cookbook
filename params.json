{"name":"Shell cookbook","tagline":"让你的shell 风生水起","body":"\r\n<h1>贡献者：隋成龙</h1>\r\n\r\n<h1>编辑整理：邢耀东</h1>\r\n<h1>测试：韩国梁</h1>\r\n\r\n<h6>第一章Shell  之讨厌的正则</h6>\r\n\r\n<ul>\r\n<li> 思想（KISS）相当重要.</li>\r\n<li>  我们遵循KISS原则  （keep it simple，stupid） </li>\r\n<li>  这事其实不难，只要按照以下思路进行就行了。 </li>\r\n</ul><blockquote>\r\n<ol>\r\n<li> 把复杂的问题简单化，模块化 </li>\r\n<li> 写出每一个模块的伪码。 </li>\r\n<li> 组装你的模块 </li>\r\n<li> 写出shell code </li>\r\n<li>  测试（test） </li>\r\n</ol>\r\n</blockquote>\r\n\r\n<h4>知道什么时候用什么实现，远比你知道怎么写code更重要。（shell不是万能的，择优取之。</h4>\r\n\r\n<h4>shell最精华，最美的地方在于有现成的命令可以使用，不用考虑过多的底层的问题。作为上</h4>\r\n\r\n<h4>层工作的最好的工具，所谓上层系统管理，网络管理等等。）</h4>\r\n\r\n<h3>战略决定生死，细节决定成败</h3>\r\n\r\n<h2>以下是我们以后将要更新的章节</h2>\r\n\r\n<ul>\r\n<li>  讨厌的正则</li>\r\n<li>  可爱的变量</li>\r\n<li>  简单明了的输入输出</li>\r\n<li>  神奇的判断</li>\r\n<li>  不可不会的文件操作</li>\r\n<li>  瞬间飞升</li>\r\n</ul><h3>第一节讨厌的正则</h3>\r\n\r\n<ul>\r\n<li>   之所以讨厌一个事物，是因为你驾驭不了它。</li>\r\n</ul><blockquote>\r\n<ol>\r\n<li>乱七八糟的符号。\r\n  举例：（grep  为行模式，默认以行显示）</li>\r\n</ol>\r\n<blockquote>\r\n<p>(1)\r\n <code>[root@localhost ~]# cat /etc/passwd | grep --color \"r..t\"</code>\r\n  <code>root:x:0:0:root:/root:/bin/bash</code>\r\n  <code>operator:x:11:0:operator:/root:/sbin/nologin</code>\r\n  <code>ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin</code>\r\n  <code>You have new mail in /var/spool/mail/root</code>\r\n  <code>[root@localhost ~]#</code></p>\r\n</blockquote>\r\n\r\n<p>显示三行</p>\r\n\r\n<blockquote>\r\n<p>(2)\r\n <code>[root@localhost ~]# cat /etc/passwd | grep --color 'root'</code>\r\n  <code>root:x:0:0:root:/root:/bin/bash</code>\r\n  <code>operator:x:11:0:operator:/root:/sbin/nologin</code>\r\n  <code>[root@localhost ~]#</code></p>\r\n</blockquote>\r\n\r\n<p>显示两行</p>\r\n\r\n<blockquote>\r\n<p>(3)\r\n <code>[root@localhost ~]# cat /etc/passwd | grep --color '^root'</code>\r\n<code>root:x:0:0:root:/root:/bin/bash</code>\r\n<code>[root@localhost ~]#</code></p>\r\n</blockquote>\r\n\r\n<p>显示一行  </p>\r\n\r\n<ul>\r\n<li> 总结以上<code>:</code>什么是正则，两个单引号中间的部分就是正则。 </li>\r\n</ul>\r\n</blockquote>\r\n\r\n<ul>\r\n<li>  正则有什么用？ </li>\r\n</ul><blockquote>\r\n<ol>\r\n<li>   查找匹配 \r\n&gt; 1)一个字符（如何在整篇文章中查找一个字符），正则提供了一些特殊符号，通过这\r\n些符号去替换一些东西.\r\n&gt;\r\n举例：在整篇文章中查找字母a </li>\r\n</ol>\r\n<blockquote>\r\n<p>使用vi编辑器打开/etc/passwd </p>\r\n\r\n<p>在末行模式下查找a \r\n输入   ：/a/<br>\r\n比如要查找abc，是一个或的关系,那么用 [ ] 。<br>\r\n输入  ：/[abc]/<br>\r\n   ：/[a-c]/<br>\r\n  ：/a|b|c/</p>\r\n\r\n<p>中括号，把你想要定位的东西写入里面。</p>\r\n\r\n<p><code>.</code>   任意一个字符。 </p>\r\n\r\n<p><code>[]</code>  选择中括号里面的任意一个。 </p>\r\n\r\n<p><code>[^]</code>  取非，取反 </p>\r\n\r\n<p><code>[:alnum:]</code>阿尔法字符加数字 </p>\r\n\r\n<p><code>[:alpha:]</code>任意一个字符<code>[[:alpha]]</code> </p>\r\n\r\n<p><code>[:digit:]</code>任意一个数字 <code>[[:digit:]]</code>（对它取反的话<code>[^[:digit:]]</code>）意为除了任意一个数字。 </p>\r\n\r\n<p><code>[:lower:]</code>小写。  </p>\r\n\r\n<p><code>[:upper:]</code>大写。</p>\r\n\r\n<p><code>[:space:]</code>空格。</p>\r\n\r\n<p><code>[:punct:]</code>标点。</p>\r\n\r\n<ul>\r\n<li>总结<code>：</code>以上是如何定位一个字符。</li>\r\n</ul>\r\n</blockquote>\r\n</blockquote>\r\n      </section>\r\n    </div>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}